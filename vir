#!/usr/bin/env bash

# NOTE: None of this works if you have spaces in your directory paths
# but seriously - who has spaces in their directory paths?
# You deserve to have this go wrong if you have spaces in your directory paths
# (Nah, joking - I'll fix it when somebody complains)

munge_file() {
  local file=$1
  local variable=$2
  local value=$3
  local MATCH="s/\$$variable/$value/g"

  mv $file $(echo $file | sed $MATCH)
}

munge_files() {
  for file in $(find $TARGET_DIR -name "*\$*")
  do
    if [[ -d $file ]]; then
      munge_file $file "app" $APP_NAME
      munge_files
      break
    else
      munge_file $file "app" $APP_NAME
    fi
  done
}

template_files() {
  local arrayname=$1[@]
  local files=("${!arrayname}")
  local variable=$2
  local value=$3
  local MATCH="s/\$$variable/$value/g"

  for file in ${files[@]}
  do
      if [[ -f $file ]]; then
          if [[ $(uname) == "Linux" ]]; then
              sed -i "$MATCH" $file
          else
              sed -i "" "$MATCH" $file
          fi
    fi
  done
}

make_bootscript() {
  local SCRIPT=""
  if [[ -f "make_bootscript.sh" ]]; then
    echo "Found local bootscript, using that as an override"
    SCRIPT="./make_bootscript.sh"
  else
    SCRIPT="$SOURCEDIR/make_bootscript.sh"
  fi
  exec $SCRIPT
}

run_app() {
  local SCRIPT=""
  if [[ -f "run.sh" ]]; then
    echo "Found local runscript, using that as an override"
    $(./run.sh $@) # Need to trim args though
  else
    # Parse args
    local rel_dir=apps/$APP_NAME/release-files
    local boot=$APP_NAME

    erl -pa deps/*/ebin deps/*/apps/*/ebin apps/*/ebin $DETACHED -setcookie $COOKIE $KERNEL -boot $boot -config $rel_dir/sys.config -$boot mode $RUN_MODE $VARIABLES
  fi
}

build_release() {
  if [[ $(uname) != "Linux" ]]; then
    echo "You are running $(uname), not Linux - aborting release"
    exit 1
  fi

  local branch_name=$(git rev-parse --abbrev-ref HEAD)
  while read line
  do
      local build_no=$line
  done < "deployment/build_no"

  if [[ $FAKERELEASE -eq 0 ]]; then
      local build_no=$((build_no + 1))
  fi

  while read line
  do
      local major=$line
  done < "deployment/major_ver"

  while read line
  do
      local minor=$line
  done < "deployment/minor_ver"

  local release="v$major.$minor.$build_no-$branch_name"

  if [[ $FAKERELEASE -eq 0 ]]; then
    echo Updating Release Number
    if [[ -f "apps/shared/include/version.hrl" ]]; then
      echo "-define(VERSION, \"$release\")." > apps/shared/include/version.hrl
    fi
    echo $build_no > "deployment/build_no"
  fi

  echo Building Release $release
  if [[ $DIRTYRELEASE -eq 1 ]]; then
    make apps
  else
    make clean-all
    make
  fi

  find "$PWD/apps/$RELEASE_APP" -name "_rel" -type d | xargs rm -rf

  make $RELEASE_TARGET

  if [[ $FAKERELEASE -eq 0 ]]; then
    # TODO: Deal with native deps if there are any
    echo Making BoM and updating Git with new release tag
    build_bill_of_materials $release "deployment/bill_of_materials"

    git add deployment/build_no
    git add deployment/bill_of_materials.txt
    git add deployment/bill_of_materials.info

    ls -d apps/*/include | xargs -n 1 git add

    git tag $release
    git commit -m "Automated build number increase: $build_no"
    git push --tags
    git push
    echo Git updated for version $release
  else
    echo "Fake release, not bumping versions"
  fi

  echo Building tars and publishing
  build_tars $release
}

build_bill_of_materials() {
  local release=$1
  local output=$2
  local logtotxt="$(pwd)/$output.txt"
  local logtoinfo="$(pwd)/$output.info"

  echo "BoM for release $release" > $logtotxt
  echo "Built on: $(hostname) by $(id -un)" >> $logtotxt
  echo "Date: $(date)" >> $logtotxt
  echo >> $logtotxt
  echo >> $logtotxt
  echo "Root project: $(git remote -v)" >> $logtotxt
  git log -n 1 >> $logtotxt
  echo >> $logtotxt
  echo -e "base\t$release\t$(git remote -v | head -1 | awk  '{print $2}')\t$(git rev-parse HEAD)" > $logtoinfo

  local all_deps=$(find deps -mindepth 1 -maxdepth 1 -type d | sort)

  for dep in $all_deps ; do
    pushd $dep > /dev/null
    local this_dep=${dep##*/}
    echo "Git tag for dependency $this_dep" >> $logtotxt
    echo "pulled from $(git remote -v)" >> $logtotxt
    git log -n 1 >> $logtotxt
    echo >> $logtotxt
    echo -e "dep\t$this_dep\t$(git remote -v | head -1 | awk  '{print $2}')\t$(git rev-parse HEAD)" >> $logtoinfo
    popd > /dev/null
  done
}

build_tars() {
  local git_tag=$1
  local releases_folder="$PWD/releases"

  mkdir -p $releases_folder

  for relx_file in $(find "$PWD/apps/$RELEASE_APP" -name "relx.config")
  do
    local app_dir=$(dirname "$relx_file")
    pushd $app_dir > /dev/null
    build_tar $releases_folder $git_tag
    popd
  done
}

build_tar() {
  local releases_folder=$1
  local git_tag=$2

  local app=${PWD##*/}
  if [[ $NO_AUTOEXTRACT -eq 1 ]]; then
    local tar_dir="${app}_release_$git_tag"
  else
    local tar_dir="${app}_$git_tag"
  fi
  local tar_name="${tar_dir}.tar.gz"
  local autorun_name="$releases_folder/install-${tar_name%.tar.gz}"
  local non_autorun_name="$releases_folder/${app}_release_$git_tag.tar.gz"

  if [[ -f ./release-files/pre_tar.sh ]]; then
      echo Running pre-tar script for $app
      ./release-files/pre_tar.sh
  fi

  echo Building $app Archive...
  rm -f $tar_name
  mv _rel/$app $tar_dir
  tar cfz $tar_name $tar_dir/  || { echo "Tar failed"; exit 1; }
  mv $tar_dir _rel/$app
  if [[ $NO_AUTOEXTRACT -eq 1 ]]; then
    mv $tar_name $non_autorun_name
  else
    cat $SOURCEDIR/autoextract.sh $tar_name > $autorun_name
    rm $tar_name
    chmod +x $autorun_name
  fi
  echo done
}


init() {
  mkdir -p $TARGET_DIR
  if [[ "$(ls -A $TARGET_DIR)" ]]; then
    read -p "Directory is not empty, do you wish to proceed? (y/n)" -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      exit 0
    fi
  fi
  echo "initing $APP_NAME with template: $TEMPLATE"
  cp -r $TEMPLATEDIR/$TEMPLATE/* $TARGET_DIR

  munge_files

  cd $TARGET_DIR

  shopt -s globstar
  files_copied=($TEMPLATEDIR/$TEMPLATE/**)
  files_copied_no_path=(${files_copied[@]#$TEMPLATEDIR/$TEMPLATE/})
  files_copied_munged=(${files_copied_no_path[@]//\$app/$APP_NAME})

  template_files files_copied_munged "app" $APP_NAME

  if [[ -f Makefile ]]; then
    make
    make_bootscript
  fi
}

get_latest() {
  pushd $1 > /dev/null
  HeadName=`git rev-parse --abbrev-ref HEAD`
  echo "On branch $HeadName"
  if [ $HeadName == "HEAD" ] ; then
    git checkout master
  fi
  git pull
  popd > /dev/null
}

update_deps() {
  shopt -s nullglob
  deps_to_process=(deps/*$DEPS_PATTERN*/)
  shopt -u nullglob

  for dep in ${deps_to_process[@]} ; do
    echo Updating $dep
    get_latest $dep
  done;
}

usage() {
  local cmd=$1
  case $cmd in
    "upgrade")
      echo "vir upgrade"
      echo "---"
      echo "   updates the templates for vir (doesn't update this running script though)"
      echo
      ;;
    "init")
      echo "vir init [-t <template>] [-d <targetdir>] <app_name>"
      echo "---"
      echo "  Creates a new project, optional defaults are:"
      echo "  template: \"$TEMPLATE\""
      echo "  targetdir: \"$TARGET_DIR\""
      echo "  By default this will be in the current working directory"
      echo "  Running this in an existing project will overlay a templates files in a non-destructive copy"
      echo "  This means you can add apps after project creation"
      echo
      ;;
    "update_deps")
      echo "vir update_deps [-d <targetdir>] dep_pattern"
      echo "---"
      echo "  Updates all the dependencies in <targetdir>/deps that match dep_pattern.  Optional defaults are:"
      echo "  targetdir: \"$TARGET_DIR\""
      echo
      ;;
    "boot")
      echo "vir boot"
      echo "---"
      echo "   Creates bootscripts for runnable applications"
      echo "   This needs to be run whenever a new dependency is added to an application"
      echo
      ;;
    "run")
      echo "vir run [-m <mode>] [-c <cookie>] [-k <kernelargs>] [-v <name=value>] <app_name>"
      echo "---"
      echo "   Runs an application from the apps dir (by name), optional defaults are:"
      echo "   mode: \"$RUN_MODE\""
      echo "   cookie: \"$COOKIE\""
      echo "   kernelargs: \"$KERNEL\""
      echo
      ;;
    "release")
      echo "vir release [-d] [-f] [-n] [-a <app_name>]"
      echo "---"
      echo "   Creates a self extracting tar of each application and updates the versions (if available)"
      echo "   -d is a dirty release (don't build deps, don't clean all)"
      echo "   use with caution"
      echo "   -f means don't bump the version and create release artifacts - use this if testing locally"
      echo "   if there is an install script found in bin/install.sh in the finished release, it will be executed"
      echo "   on extraction"
      echo "   -a app_name just does the release / tar of app_name"
      echo "   -n means to not build an auto-extracting tar"
      echo
      ;;
    *)
      echo
      echo "vir is a tool for doing the basic Erlangy bits and bobs, see the below commands for more info"
      echo "---"
      echo
      usage "upgrade"
      usage "init"
      usage "update_deps"
      usage "boot"
      usage "run"
      usage "release"
      echo
      ;;
  esac
}


COMMAND=$1
TEMPLATE=empty
APP_NAME=
TARGET_DIR=$(pwd)
OPTIND=2
SOURCEDIR=$HOME/.vir
TEMPLATEDIR=$SOURCEDIR/templates
RUN_MODE=''
DIRTYRELEASE=0
FAKERELEASE=0
COOKIE='cookie'
KERNEL='-kernel inet_dist_listen_min 9100 inet_dist_listen_max 9105 +K true +A 10'


check_vir_path() {
  if [[ ! -d $SOURCEDIR ]]; then
    echo "Vir installation not found, cloning repo into $SOURCEDIR"
    git clone https://github.com/robashton/vir.git $SOURCEDIR
  fi
}

upgrade_vir() {
  pushd $SOURCEDIR > /dev/null
  git pull
  popd > /dev/null
}

check_vir_path

case "$COMMAND" in
  "upgrade")
    upgrade_vir
    ;;
  "init")
      while getopts ":t:d:" option; do
        case "$option" in
          t)
            TEMPLATE=$OPTARG
            ;;
          d)
            TARGET_DIR=$OPTARG
            ;;
          ?)
            echo "Error: unknown option -$OPTARG"
            usage "init"
            exit 1
            ;;
        esac
      done
      shift $(($OPTIND - 1))
      APP_NAME=$1
      if [[ -z $APP_NAME ]]; then
        usage "init"
        exit 1
      fi
      init $1
    ;;
  "update_deps")
    while getopts ":d" option; do
      case "$option" in
        d)
          TARGET_DIR=$OPTARG
          ;;
        ?)
          echo "Error: unknown option -$OPTARG"
          usage "update_deps"
          exit 1
          ;;
      esac
    done
    shift $(($OPTIND - 1))
    DEPS_PATTERN=$1
    if [[ -z $DEPS_PATTERN ]]; then
      usage "update_deps"
      exit 1
    fi
    update_deps $DEPS_PATTERN
    ;;
  "boot")
    make_bootscript
    ;;
  "run")
    while getopts ":m:c:k:v:d" option; do
      case "$option" in
        m)
          RUN_MODE=$OPTARG
          ;;
        c)
          COOKIE=$OPTARG
          ;;
        k)
          KERNEL=$OPTARG
          ;;
        v)
            IFS='=' read NAME VALUE <<< "$OPTARG"
            NAMES=(${NAMES[@]} $NAME)
            VALUES=(${VALUES[@]} $VALUE)
            ;;
        d)
            DETACHED="-noinput -noshell"
            ;;
        ?)
          echo "Error: unknown option -$OPTARG"
          usage
          exit 1
          ;;
      esac
    done
    shift $(($OPTIND - 1))
    APP_NAME=$1
    n=0
    for name in ${NAMES[@]}; do
        VARIABLES="$VARIABLES -$APP_NAME $name ${VALUES[$n]}"
        n=$(($n+1))
    done
    run_app
    ;;
  "release")
    RELEASE_TARGET=rel
    RELEASE_APP=
    while getopts ":dfa:" option; do
      case "$option" in
        d)
          DIRTYRELEASE=1
          ;;
        f)
          FAKERELEASE=1
          ;;
        a)
          RELEASE_APP=$OPTARG
          RELEASE_TARGET=$OPTARG.rel
          ;;
        ?)
          echo "Error: unknown option -$OPTARG"
          usage
          exit 1
          ;;
      esac
    done
    build_release
    ;;
  *)
    usage
    exit 1
    ;;
esac
